{"hash":"55af111bd0cf98ff37657aa7f4ee0c6f7b28fd11","data":{"post":{"id":"dc610bb3e9e91251f61078d75cea3f98","title":"Css FlexBox 筆記","content":"<h1 id=\"css-flexbox-筆記\"><a href=\"#css-flexbox-%E7%AD%86%E8%A8%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CSS Flexbox 筆記</h1>\n<h2 id=\"css-flexbox-介紹\"><a href=\"#css-flexbox-%E4%BB%8B%E7%B4%B9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CSS Flexbox 介紹</h2>\n<pre class=\"language-text\"><code class=\"language-text\">Flexbox 是一個 CSS3 的盒子模型 ( box model )-靈活的盒子 ( Flexible Box )</code></pre>\n<h2 id=\"flexbox-模型概念\"><a href=\"#flexbox-%E6%A8%A1%E5%9E%8B%E6%A6%82%E5%BF%B5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Flexbox 模型概念</h2>\n<p>Flexbox 的盒子模型具有以下的重要佈局參數:</p>\n<ul>\n<li>水平的起點與終點 ( main start、main end )</li>\n<li>垂直的起點與終點 ( cross start、cross end )</li>\n<li>水平軸與垂直軸 ( main axis、cross axis )</li>\n<li>水平尺寸與垂直尺寸 ( main size、cross size )</li>\n</ul>\n<img src =\"http://imgur.com/3t1z4W7.png\" alt=\"drawing\" width=\"100%\">\n<h2 id=\"flexbox-屬性介紹\"><a href=\"#flexbox-%E5%B1%AC%E6%80%A7%E4%BB%8B%E7%B4%B9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Flexbox 屬性介紹</h2>\n<ul>\n<li>display</li>\n<li>flex-direction</li>\n<li>justify-content</li>\n<li>align-items :align-items 決定了內容元素與整個 Flexbox 的「垂直對齊」位置</li>\n<li>align-self :align-self 的設定與 align-items 相同，但目的不同，align-self 的作用在於覆寫已經套用 align-items 的屬性</li>\n<li>align-content</li>\n<li>flex-wrap</li>\n<li>order</li>\n<li>flex  </li>\n</ul>\n<h3 id=\"display\"><a href=\"#display\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>display</h3>\n<pre class=\"language-text\"><code class=\"language-text\">display:flex  \ndlsplay:inline-flex、inline、inline-block(在後方的元素不會換行)  </code></pre>\n<img src =\"https://imgur.com/PLkKoDR.png\" alt=\"drawing\" width=\"100%\">\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>flex-direction</h3>\n<p>flex-direction 表示 Flexbox 內容元素的「排列方向」，分別有下列四種:<br>\nrow：預設值，由左到右，從上到下<br>\nrow-reverse：與 row 相反<br>\ncolumn：從上到下，再由左到右<br>\ncolumn-reverse：與 column 相反<br>\n<img src =\"http://imgur.com/Pc3hwp4.png\" alt=\"drawing\" width=\"100%\"></p>\n<h3 id=\"justify-content\"><a href=\"#justify-content\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>justify-content</h3>\n<p>justify-content決定內容元素與整個 Flexbox 的「水平對齊」位置<br>\n利用Flexbox 盒子模型，具有 main start 與 main end 左右兩端點的特性來設定justify-content\nflex-start：預設值，對齊最左邊的 main start<br>\nflex-end：對齊最左邊的 main end<br>\ncenter：水平置中<br>\nspace-between：平均分配內容元素，左右元素將會與 main start 和 main end 貼齊<br>\nspace-around：平均分配內容元素，間距也是平均分配<br>\n<img src =\"http://imgur.com/4qQsgQT.png\" alt=\"drawing\" width=\"100%\"></p>\n<h3 id=\"flex\"><a href=\"#flex\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>flex</h3>\n<p> flex 其實是由三個屬性組合而成，依照先後順序分別是「flex-grow」、「flex-shrink」和「flex-basis」<br>\n如果 flex 只填了一個數值 ( 無單位 )，預設以 flex-grow 的方式呈現，至於三個屬性的解釋如下：  </p>\n<pre class=\"language-text\"><code class=\"language-text\">flex-grow：數字，無單位當子元素的 flex-basis 長度「小」於它自己在父元素分配到的長度，按照數字做相對應的「伸展」比例分配  \n預設值為 0，不會進行彈性變化，不可為負值，設為 1 則會進行彈性變化。  \n\nflex-shrink：數字，無單位，當子元素的 flex-basis 長度「大」於它自己在父元素分配到的長度，按照數字做相對應的「壓縮」比例分配  \n預設值為 1，設為 0 的話不會進行彈性變化，不可為負值。  \n\nflex-basis：子元素的基本大小，作為父元素的大小比較基準，預設值為 0，也因為預設值為 0，所以沒有設定此屬性的時候，會以直接採用 flex-grow 屬性，flex-basis 也可以設為 auto  \n如果設為 auto，就表示子元素以自己的基本大小為單位。  </code></pre>\n","date":"29 December 2019","timeToRead":1,"description":" Flexbox 是一個 CSS3 的盒子模型 ( box model )-靈活的盒子 ( Flexible Box )","tags":[{"id":"CSS","title":"CSS","path":"/tag/CSS/"}]}},"context":{}}